comp_l<-as.numeric(comp_l)
tinfo_layer       <- fit$tinfo[[l]]
N_l <- nrow(tinfo_layer$loc)
Yhat_l <- datSamplesCompNew$Yhat[datSamplesCompNew$component==comp_l[1]]
#cat(typeof(Yhat_l))
Yhat_l <- rep(0,length(Yhat_l))
YPI_l  <- Yhat_l
for(j in comp_l){
Yhat_l<-Yhat_l+datSamplesCompNew$Yhat[datSamplesCompNew$component==j]
YPI_l<- YPI_l+datSamplesCompNew$YhatUpp[datSamplesCompNew$component==j]-datSamplesCompNew$YhatLow[datSamplesCompNew$component==j]
#data_1<-as.data.frame(cbind(Z=rowMeans(fit_real$mu.component[]),x=fit_real$X))
rec<-paste0('Layer=',l,' Comp=',j,'\n')
cat(rec)
txdata<-matrix(NA,nrow=0,ncol=3)
datatmp<-data.frame(Y=Yhat_l,
X1=fit$Xnew[,1],X2=fit$Xnew[,2],
Y_PIwidth=YPI_l
)
plotPrec(datatmp)
#image(datatmp)
#ggplot(datatmp) +
#  geom_point(aes(X1, X2, color =Y),size=3) +
#  ggtitle(rec) +
#  theme_minimal()+
#  ylim(36, 42)+
#  xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
}
common_scale<-xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
gtmp_1<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y),size=3) +
ggtitle(paste0('Pred. Mean of Component in Layer=',l)) +
theme_minimal()+
common_scale;
gtmp_2<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y_PIwidth),size=3)
ggtitle(paste0('PI width of Component in Layer=',l)) +
theme_minimal()+
common_scale_var;
txtmp<-ggplot()
for(j in comp_l) {
#Plot a cell
j_counter=which(comp_l==j)
loc_j_l <- tinfo_layer$loc[j_counter,]
rad_j_l_X1 <- tinfo_layer$rad[1]
rad_j_l_X2 <- tinfo_layer$rad[2]
#ids_j_l <- ids_X_comp(X,loc=loc_j_l,rad=list(rad_j_l_X1,rad_j_l_X2),dims=D)
#cat(loc_j_l)
#ggplot()+scale_x_continuous(name="x") +
#  scale_y_continuous(name="y")+
celltmp<-geom_rect( xmin=as.numeric(loc_j_l[1]-rad_j_l_X1),
xmax=as.numeric(loc_j_l[1]+rad_j_l_X1),
ymin=as.numeric(loc_j_l[2]-rad_j_l_X2),
ymax=as.numeric(loc_j_l[2]+rad_j_l_X2),colour = "white", fill=alpha("grey",0))
#txtmp<-geom_text( aes(x = loc_j_l[1], y = loc_j_l[2], label = as.character(j),size = 3, colour='white') )
#txdata<- rbind(txdata,c(loc_j_l[1], loc_j_l[2], j))
#txtmp<-  txtmp+celltmp
gtmp_1<- gtmp_1+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
gtmp_2<- gtmp_2+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
}
#message(txdata)
#print(txdata)
#txdata<-as.data.frame(txdata)
#colnames(txdata)<-c('x','y','label')
#txtmp<-txtmp+geom_text(data=txdata,aes(x=x,y=y,label=label),colour='black')
grid.arrange(gtmp_1,gtmp_2,ncol=2)
}
}
plotPrec2(fit_real)
traceback()
plotPrec2<-function(fit){
N <- nrow(fit$layers)
L <- length(unique(fit$layers$layer))
D <- ncol(fit$Xnew)
datSamplesCompNew <- NULL
for(j in 1:N) {
datSamplesCompNew_j <- as.data.frame(fit$Xnew)
names(datSamplesCompNew_j) <- paste0("X",1:D)
datSamplesCompNew_j <- cbind(datSamplesCompNew_j,
data.frame(
Yhat = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "mean"),
YhatLow = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .025),
YhatUpp = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .975),
component = j))
datSamplesCompNew <- rbind(datSamplesCompNew,datSamplesCompNew_j)
}
for(l in 1:L) {
comp_l <- fit_real$layers$comp[fit$layers$layer==l]
#set.panel()
comp_l<-as.numeric(comp_l)
tinfo_layer       <- fit$tinfo[[l]]
N_l <- nrow(tinfo_layer$loc)
Yhat_l <- datSamplesCompNew$Yhat[datSamplesCompNew$component==comp_l[1]]
#cat(typeof(Yhat_l))
Yhat_l <- rep(0,length(Yhat_l))
YPI_l  <- Yhat_l
for(j in comp_l){
Yhat_l<-Yhat_l+datSamplesCompNew$Yhat[datSamplesCompNew$component==j]
YPI_l<- YPI_l+datSamplesCompNew$YhatUpp[datSamplesCompNew$component==j]-datSamplesCompNew$YhatLow[datSamplesCompNew$component==j]
#data_1<-as.data.frame(cbind(Z=rowMeans(fit_real$mu.component[]),x=fit_real$X))
rec<-paste0('Layer=',l,' Comp=',j,'\n')
cat(rec)
txdata<-matrix(NA,nrow=0,ncol=3)
datatmp<-data.frame(Y=Yhat_l,
X1=fit$Xnew[,1],X2=fit$Xnew[,2],
Y_PIwidth=YPI_l
)
plotPrec(datatmp)
#image(datatmp)
#ggplot(datatmp) +
#  geom_point(aes(X1, X2, color =Y),size=3) +
#  ggtitle(rec) +
#  theme_minimal()+
#  ylim(36, 42)+
#  xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
}
common_scale<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
gtmp_1<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y),size=3) +
ggtitle(paste0('Pred. Mean of Component in Layer=',l)) +
theme_minimal()+
common_scale;
gtmp_2<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y_PIwidth),size=3)
ggtitle(paste0('PI width of Component in Layer=',l)) +
theme_minimal()+
common_scale_var;
txtmp<-ggplot()
for(j in comp_l) {
#Plot a cell
j_counter=which(comp_l==j)
loc_j_l <- tinfo_layer$loc[j_counter,]
rad_j_l_X1 <- tinfo_layer$rad[1]
rad_j_l_X2 <- tinfo_layer$rad[2]
#ids_j_l <- ids_X_comp(X,loc=loc_j_l,rad=list(rad_j_l_X1,rad_j_l_X2),dims=D)
#cat(loc_j_l)
#ggplot()+scale_x_continuous(name="x") +
#  scale_y_continuous(name="y")+
celltmp<-geom_rect( xmin=as.numeric(loc_j_l[1]-rad_j_l_X1),
xmax=as.numeric(loc_j_l[1]+rad_j_l_X1),
ymin=as.numeric(loc_j_l[2]-rad_j_l_X2),
ymax=as.numeric(loc_j_l[2]+rad_j_l_X2),colour = "white", fill=alpha("grey",0))
#txtmp<-geom_text( aes(x = loc_j_l[1], y = loc_j_l[2], label = as.character(j),size = 3, colour='white') )
#txdata<- rbind(txdata,c(loc_j_l[1], loc_j_l[2], j))
#txtmp<-  txtmp+celltmp
gtmp_1<- gtmp_1+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
gtmp_2<- gtmp_2+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
}
#message(txdata)
#print(txdata)
#txdata<-as.data.frame(txdata)
#colnames(txdata)<-c('x','y','label')
#txtmp<-txtmp+geom_text(data=txdata,aes(x=x,y=y,label=label),colour='black')
grid.arrange(gtmp_1,gtmp_2,ncol=2)
}
}
plotPrec2(fit_real)
plotPrec2<-function(fit){
N <- nrow(fit$layers)
L <- length(unique(fit$layers$layer))
D <- ncol(fit$Xnew)
datSamplesCompNew <- NULL
for(j in 1:N) {
datSamplesCompNew_j <- as.data.frame(fit$Xnew)
names(datSamplesCompNew_j) <- paste0("X",1:D)
datSamplesCompNew_j <- cbind(datSamplesCompNew_j,
data.frame(
Yhat = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "mean"),
YhatLow = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .025),
YhatUpp = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .975),
component = j))
datSamplesCompNew <- rbind(datSamplesCompNew,datSamplesCompNew_j)
}
for(l in 1:L) {
comp_l <- fit_real$layers$comp[fit$layers$layer==l]
#set.panel()
comp_l<-as.numeric(comp_l)
tinfo_layer       <- fit$tinfo[[l]]
N_l <- nrow(tinfo_layer$loc)
Yhat_l <- datSamplesCompNew$Yhat[datSamplesCompNew$component==comp_l[1]]
#cat(typeof(Yhat_l))
Yhat_l <- rep(0,length(Yhat_l))
YPI_l  <- Yhat_l
for(j in comp_l){
Yhat_l<-Yhat_l+datSamplesCompNew$Yhat[datSamplesCompNew$component==j]
YPI_l<- YPI_l+datSamplesCompNew$YhatUpp[datSamplesCompNew$component==j]-datSamplesCompNew$YhatLow[datSamplesCompNew$component==j]
#data_1<-as.data.frame(cbind(Z=rowMeans(fit_real$mu.component[]),x=fit_real$X))
rec<-paste0('Layer=',l,' Comp=',j,'\n')
cat(rec)
txdata<-matrix(NA,nrow=0,ncol=3)
datatmp<-data.frame(Y=Yhat_l,
X1=fit$Xnew[,1],X2=fit$Xnew[,2],
Y_PIwidth=YPI_l
)
plotPrec(datatmp)
#image(datatmp)
#ggplot(datatmp) +
#  geom_point(aes(X1, X2, color =Y),size=3) +
#  ggtitle(rec) +
#  theme_minimal()+
#  ylim(36, 42)+
#  xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
}
common_scale<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
common_scale_var<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
gtmp_1<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y),size=3) +
ggtitle(paste0('Pred. Mean of Component in Layer=',l)) +
theme_minimal()+
common_scale;
gtmp_2<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y_PIwidth),size=3)
ggtitle(paste0('PI width of Component in Layer=',l)) +
theme_minimal()+
common_scale_var;
txtmp<-ggplot()
for(j in comp_l) {
#Plot a cell
j_counter=which(comp_l==j)
loc_j_l <- tinfo_layer$loc[j_counter,]
rad_j_l_X1 <- tinfo_layer$rad[1]
rad_j_l_X2 <- tinfo_layer$rad[2]
#ids_j_l <- ids_X_comp(X,loc=loc_j_l,rad=list(rad_j_l_X1,rad_j_l_X2),dims=D)
#cat(loc_j_l)
#ggplot()+scale_x_continuous(name="x") +
#  scale_y_continuous(name="y")+
celltmp<-geom_rect( xmin=as.numeric(loc_j_l[1]-rad_j_l_X1),
xmax=as.numeric(loc_j_l[1]+rad_j_l_X1),
ymin=as.numeric(loc_j_l[2]-rad_j_l_X2),
ymax=as.numeric(loc_j_l[2]+rad_j_l_X2),colour = "white", fill=alpha("grey",0))
#txtmp<-geom_text( aes(x = loc_j_l[1], y = loc_j_l[2], label = as.character(j),size = 3, colour='white') )
#txdata<- rbind(txdata,c(loc_j_l[1], loc_j_l[2], j))
#txtmp<-  txtmp+celltmp
gtmp_1<- gtmp_1+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
gtmp_2<- gtmp_2+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
}
#message(txdata)
#print(txdata)
#txdata<-as.data.frame(txdata)
#colnames(txdata)<-c('x','y','label')
#txtmp<-txtmp+geom_text(data=txdata,aes(x=x,y=y,label=label),colour='black')
grid.arrange(gtmp_1,gtmp_2,ncol=2)
}
}
plotPrec2(fit_real)
plotPrec2<-function(fit){
N <- nrow(fit$layers)
L <- length(unique(fit$layers$layer))
D <- ncol(fit$Xnew)
datSamplesCompNew <- NULL
for(j in 1:N) {
datSamplesCompNew_j <- as.data.frame(fit$Xnew)
names(datSamplesCompNew_j) <- paste0("X",1:D)
datSamplesCompNew_j <- cbind(datSamplesCompNew_j,
data.frame(
Yhat = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "mean"),
YhatLow = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .025),
YhatUpp = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .975),
component = j))
datSamplesCompNew <- rbind(datSamplesCompNew,datSamplesCompNew_j)
}
for(l in 1:L) {
comp_l <- fit_real$layers$comp[fit$layers$layer==l]
#set.panel()
comp_l<-as.numeric(comp_l)
tinfo_layer       <- fit$tinfo[[l]]
N_l <- nrow(tinfo_layer$loc)
Yhat_l <- datSamplesCompNew$Yhat[datSamplesCompNew$component==comp_l[1]]
#cat(typeof(Yhat_l))
Yhat_l <- rep(0,length(Yhat_l))
YPI_l  <- Yhat_l
for(j in comp_l){
Yhat_l<-Yhat_l+datSamplesCompNew$Yhat[datSamplesCompNew$component==j]
YPI_l<- YPI_l+datSamplesCompNew$YhatUpp[datSamplesCompNew$component==j]-datSamplesCompNew$YhatLow[datSamplesCompNew$component==j]
#data_1<-as.data.frame(cbind(Z=rowMeans(fit_real$mu.component[]),x=fit_real$X))
rec<-paste0('Layer=',l,' Comp=',j,'\n')
cat(rec)
txdata<-matrix(NA,nrow=0,ncol=3)
datatmp<-data.frame(Y=Yhat_l,
X1=fit$Xnew[,1],X2=fit$Xnew[,2],
Y_PIwidth=YPI_l
)
plotPrec(datatmp)
#image(datatmp)
#ggplot(datatmp) +
#  geom_point(aes(X1, X2, color =Y),size=3) +
#  ggtitle(rec) +
#  theme_minimal()+
#  ylim(36, 42)+
#  xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
}
common_scale<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
common_scale_var<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
gtmp_1<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y),size=3) +
ggtitle(paste0('Pred. Mean of Component in Layer=',l)) +
theme_minimal()+
common_scale;
gtmp_2<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y_PIwidth),size=3) +
ggtitle(paste0('PI width of Component in Layer=',l)) +
theme_minimal()+
common_scale_var;
txtmp<-ggplot()
for(j in comp_l) {
#Plot a cell
j_counter=which(comp_l==j)
loc_j_l <- tinfo_layer$loc[j_counter,]
rad_j_l_X1 <- tinfo_layer$rad[1]
rad_j_l_X2 <- tinfo_layer$rad[2]
#ids_j_l <- ids_X_comp(X,loc=loc_j_l,rad=list(rad_j_l_X1,rad_j_l_X2),dims=D)
#cat(loc_j_l)
#ggplot()+scale_x_continuous(name="x") +
#  scale_y_continuous(name="y")+
celltmp<-geom_rect( xmin=as.numeric(loc_j_l[1]-rad_j_l_X1),
xmax=as.numeric(loc_j_l[1]+rad_j_l_X1),
ymin=as.numeric(loc_j_l[2]-rad_j_l_X2),
ymax=as.numeric(loc_j_l[2]+rad_j_l_X2),colour = "white", fill=alpha("grey",0))
#txtmp<-geom_text( aes(x = loc_j_l[1], y = loc_j_l[2], label = as.character(j),size = 3, colour='white') )
#txdata<- rbind(txdata,c(loc_j_l[1], loc_j_l[2], j))
#txtmp<-  txtmp+celltmp
gtmp_1<- gtmp_1+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
gtmp_2<- gtmp_2+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
}
#message(txdata)
#print(txdata)
#txdata<-as.data.frame(txdata)
#colnames(txdata)<-c('x','y','label')
#txtmp<-txtmp+geom_text(data=txdata,aes(x=x,y=y,label=label),colour='black')
grid.arrange(gtmp_1,gtmp_2,ncol=2)
}
}
plotPrec2(fit_real)
plotPrec2<-function(fit){
N <- nrow(fit$layers)
L <- length(unique(fit$layers$layer))
D <- ncol(fit$Xnew)
datSamplesCompNew <- NULL
for(j in 1:N) {
datSamplesCompNew_j <- as.data.frame(fit$Xnew)
names(datSamplesCompNew_j) <- paste0("X",1:D)
datSamplesCompNew_j <- cbind(datSamplesCompNew_j,
data.frame(
Yhat = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "mean"),
YhatLow = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .025),
YhatUpp = apply(sapply(fit$mu.new.component, FUN = function(x) {x[,j]}),
1, FUN = "quantile", .975),
component = j))
datSamplesCompNew <- rbind(datSamplesCompNew,datSamplesCompNew_j)
}
for(l in 1:L) {
comp_l <- fit_real$layers$comp[fit$layers$layer==l]
#set.panel()
comp_l<-as.numeric(comp_l)
tinfo_layer       <- fit$tinfo[[l]]
N_l <- nrow(tinfo_layer$loc)
Yhat_l <- datSamplesCompNew$Yhat[datSamplesCompNew$component==comp_l[1]]
#cat(typeof(Yhat_l))
Yhat_l <- rep(0,length(Yhat_l))
YPI_l  <- Yhat_l
for(j in comp_l){
Yhat_l<-Yhat_l+datSamplesCompNew$Yhat[datSamplesCompNew$component==j]
YPI_l<- YPI_l+datSamplesCompNew$YhatUpp[datSamplesCompNew$component==j]-datSamplesCompNew$YhatLow[datSamplesCompNew$component==j]
#data_1<-as.data.frame(cbind(Z=rowMeans(fit_real$mu.component[]),x=fit_real$X))
rec<-paste0('Layer=',l,' Comp=',j,'\n')
cat(rec)
txdata<-matrix(NA,nrow=0,ncol=3)
datatmp<-data.frame(Y=Yhat_l,
X1=fit$Xnew[,1],X2=fit$Xnew[,2],
Y_PIwidth=YPI_l
)
g<-plotPrec(datatmp)
grid.arrange(g)
#image(datatmp)
#ggplot(datatmp) +
#  geom_point(aes(X1, X2, color =Y),size=3) +
#  ggtitle(rec) +
#  theme_minimal()+
#  ylim(36, 42)+
#  xlim(-110,-100)+scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
}
common_scale<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
common_scale_var<-scale_color_gradientn(colours = rainbow(5), limits=c(125, 875))
gtmp_1<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y),size=3) +
ggtitle(paste0('Pred. Mean of Component in Layer=',l)) +
theme_minimal()+
common_scale;
gtmp_2<-ggplot(datatmp) +
geom_point(aes(X1, X2, color =Y_PIwidth),size=3) +
ggtitle(paste0('PI width of Component in Layer=',l)) +
theme_minimal()+
common_scale_var;
txtmp<-ggplot()
for(j in comp_l) {
#Plot a cell
j_counter=which(comp_l==j)
loc_j_l <- tinfo_layer$loc[j_counter,]
rad_j_l_X1 <- tinfo_layer$rad[1]
rad_j_l_X2 <- tinfo_layer$rad[2]
#ids_j_l <- ids_X_comp(X,loc=loc_j_l,rad=list(rad_j_l_X1,rad_j_l_X2),dims=D)
#cat(loc_j_l)
#ggplot()+scale_x_continuous(name="x") +
#  scale_y_continuous(name="y")+
celltmp<-geom_rect( xmin=as.numeric(loc_j_l[1]-rad_j_l_X1),
xmax=as.numeric(loc_j_l[1]+rad_j_l_X1),
ymin=as.numeric(loc_j_l[2]-rad_j_l_X2),
ymax=as.numeric(loc_j_l[2]+rad_j_l_X2),colour = "white", fill=alpha("grey",0))
#txtmp<-geom_text( aes(x = loc_j_l[1], y = loc_j_l[2], label = as.character(j),size = 3, colour='white') )
#txdata<- rbind(txdata,c(loc_j_l[1], loc_j_l[2], j))
#txtmp<-  txtmp+celltmp
gtmp_1<- gtmp_1+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
gtmp_2<- gtmp_2+celltmp+annotate("text",x=as.numeric(loc_j_l[1]),y=as.numeric(loc_j_l[2]),label=as.character(j),colour='white',size=4)#+txtmp
}
#message(txdata)
#print(txdata)
#txdata<-as.data.frame(txdata)
#colnames(txdata)<-c('x','y','label')
#txtmp<-txtmp+geom_text(data=txdata,aes(x=x,y=y,label=label),colour='black')
grid.arrange(gtmp_1,gtmp_2,ncol=2)
}
}
plotPrec2(fit_real)
plotPrec(data_fit)
read.table('test.txt')
prep<-read.table('test.txt')
Y<-prep[,1]
X<-prep[,2:3]
X
#range01 is a force-scaled function that stipulates the scale to be on [0,1].
X1t_dat<-min(X[,1])
X2t_dat<-min(X[,2])
X1m_dat<-max(X[,1])-min(X[,1])
X2m_dat<-max(X[,2])-min(X[,2])
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
X[,1]<-range01(X[,1])
X[,2]<-range01(X[,2])
X1new <- edgeGridX
X2new <- edgeGridY
#Make marginal mean and variance 0 and 1
meanY <- mean(Y)
varY <- as.numeric(var(Y))
Y = (Y - meanY)/sqrt(varY)
para=list(Yt=meanY,Ym=sqrt(varY),
X1t=X1t_dat,X1m=X1m_dat,
X2t=X2t_dat,X2m=X2m_dat)
#Generate data to fit SAGP model. Uncomment the portion of code
#to generate the desired type of data.
#Parameters, determine the location where new predictions lie.
edgeGridX <- seq(0,1,length = 100)
edgeGridY <- seq(0,1,length = 100)
# In terms of UTM coordinates.
Xnew <- as.matrix(expand.grid(edgeGridX,edgeGridY))
truthFUN<-function(X1,X2){levy(c(X1,X2))}
X<-expand.grid(seq(-10,10,1),seq(-10,10,1))
X<-as.matrix(X)
truth<-c()
Y<-c()
for(j in 1:nrow(X)){
truth[j]=truthFUN(X[j,1],X[j,2])
Y[j]=truth[j]+rnorm(1)
}
prep<-read.table('test.txt')
Y<-prep[,1]
X<-prep[,2:3]
#range01 is a force-scaled function that stipulates the scale to be on [0,1].
X1t_dat<-min(X[,1])
X2t_dat<-min(X[,2])
X1m_dat<-max(X[,1])-min(X[,1])
X2m_dat<-max(X[,2])-min(X[,2])
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
X[,1]<-range01(X[,1])
X[,2]<-range01(X[,2])
X1new <- edgeGridX
X2new <- edgeGridY
#Make marginal mean and variance 0 and 1
meanY <- mean(Y)
varY <- as.numeric(var(Y))
Y = (Y - meanY)/sqrt(varY)
para=list(Yt=meanY,Ym=sqrt(varY),
X1t=X1t_dat,X1m=X1m_dat,
X2t=X2t_dat,X2m=X2m_dat)
#Hyperparameters for priors.
pinfo=list(m=5, #number of pseudo-inputs
a=100, b=1, # hyp. for lambda (precision of noise) - gamma prior
r=.1, #Parameter that controls prior of eta
logRhoFirstLayer=-1, # logarithm (base 10) of rho in first layer
logRhoLastLayer=-50  # logarithm (base 10) of rho in last layer
)
########
# MCMC #
########
#Parameters of the MCMC sampler.
minfo=list(Nmcmc=1000, #num saved samples
burnIn=1000, #num discarded samples for burn in
semiWidthRho=0.05, #semiwidth of the proposal uniform distribution in MH step for rho (tuned adaptively)
semiWidthEta=0.05, #semiwidth of the proposal uniform distribution in MH step for eta (tuned adaptively)
seed=1234) #seed of the sampler, for reproducibility
tinfo <- generateTree(list(c(0,1),c(0,1)),L = 3)
source("loader.r")
source("loader.r")
source("loader.r")
